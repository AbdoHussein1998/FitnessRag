services:
  # --- Database Services ---
  mongo_db:
    image: mongodb/mongodb-community-server:5.0.1-ubuntu2004
    container_name: dc_mongo_db
    ports:
      - "27001:27017"
    volumes:
      - mongo_db:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    networks:
      - dc_network
    restart: always

  postgres_db:
    image: postgres:16.9-bullseye
    container_name: dc_postgres_db
    ports:
      - "27002:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_db:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - dc_network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  qdrant_db:
    image: qdrant/qdrant:v1.14.1
    container_name: dc_qdrant_db
    ports:
      - "27003:6333"
    volumes:
      - qdrant_db:/qdrant/storage
    networks:
      - dc_network
    restart: always

  # --- LLM Services ---
  vllm_llm:
    image: vllm/vllm-openai:v0.9.1
    container_name: dc_vllm_llm
    ports:
      - "8001:8000"
    volumes:
      - vllm_llm:/model_weights
    environment:
      MODEL: "TinyLlama/TinyLlama-1.1B-Chat-v1.0"
      HF_HOME: /model_weights
      VLLM_LOGGING_LEVEL: DEBUG
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    networks:
      - dc_network
  ollama_llm:
    image: ollama/ollama:0.9.4-rc3
    container_name: dc_ollama_llm
    ports:
      - "8002:11434"
    volumes:
      - ollama_llm:/root/.ollama
    restart: always
    environment:
      - OLLAMA_ORIGIN=*
    entrypoint: sh -c "nohup bash -c 'ollama serve' & until ollama list >/dev/null 2>&1; do sleep 1; done && ollama pull nomic-embed-text && wait"
    networks:
      - dc_network

  # # --- Airflow Services ---
  # airflow-init:
  #   image: airflow-custom:latest
  #   build:
  #     context: .
  #     dockerfile: docker_files/apache_airflow/Dockerfile
  #   container_name: airflow-init
  #   environment:
  #     AIRFLOW_ADMIN_USERNAME: ${AIRFLOW_ADMIN_USERNAME}
  #     AIRFLOW_ADMIN_PASSWORD: ${AIRFLOW_ADMIN_PASSWORD}
  #     AIRFLOW_ADMIN_EMAIL: ${AIRFLOW_ADMIN_EMAIL}
  #     AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_db:5432/${POSTGRES_DB}
  #     AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
  #     AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
  #     AIRFLOW__CORE__EXECUTOR: LocalExecutor
  #     AIRFLOW__WEBSERVER__RBAC: 'true'
  #     _AIRFLOW_DB_UPGRADE: 'true'
  #     _AIRFLOW_WWW_USER_CREATE: 'true'
  #     _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_ADMIN_USERNAME}
  #     _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_ADMIN_PASSWORD}
  #     _AIRFLOW_WWW_USER_EMAIL: ${AIRFLOW_ADMIN_EMAIL}
  #   volumes:
  #     - ./src/Apache/Airflow:/opt/airflow/dags
  #     - ./src:/opt/airflow/scripts
  #   networks:
  #     - dc_network
  #   command: >
  #     bash -c "
  #       echo 'Waiting for PostgreSQL to be ready...'
  #       while ! pg_isready -h postgres_db -p 5432 -U ${POSTGRES_USER}; do
  #         sleep 2
  #       done
  #       echo 'PostgreSQL is ready. Initializing Airflow database...'
  #       airflow db init
  #       echo 'Database initialized. Creating admin user...'
  #       airflow users create \
  #         --username ${AIRFLOW_ADMIN_USERNAME} \
  #         --password ${AIRFLOW_ADMIN_PASSWORD} \
  #         --firstname Admin \
  #         --lastname Admin \
  #         --role Admin \
  #         --email ${AIRFLOW_ADMIN_EMAIL} || echo 'User already exists'
  #       echo 'Airflow initialization complete!'
  #     "
  #   depends_on:
  #     postgres_db:
  #       condition: service_healthy
  #   restart: "no"

  apache_airflow_oc:
    image: airflow-custom:latest
    build:
      context: .
      dockerfile: docker_files/apache_airflow/Dockerfile
    container_name: dc_apache_airflow
    ports:
      - "27004:8080"
    environment:
      AIRFLOW_ADMIN_USERNAME: ${AIRFLOW_ADMIN_USERNAME}
      AIRFLOW_ADMIN_PASSWORD: ${AIRFLOW_ADMIN_PASSWORD}
      AIRFLOW_ADMIN_EMAIL: ${AIRFLOW_ADMIN_EMAIL}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_db:5432/${POSTGRES_DB}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__WEBSERVER__RBAC: 'true'
    volumes:
      - ./src/Apache/Airflow:/opt/airflow/dags
      - ./src:/opt/airflow/scripts
    networks:
      - dc_network
    command: >
      bash -c "
        echo 'Starting Airflow API server and web UI...'
        airflow api-server"
    depends_on:
      - postgres_db
      - mongo_db
      - qdrant_db
    restart: always

  # airflow-triggerer:
  #   image: airflow-custom:latest
  #   build:
  #     context: .
  #     dockerfile: docker_files/apache_airflow/Dockerfile
  #   container_name: airflow-triggerer
  #   environment:
  #     AIRFLOW_ADMIN_USERNAME: ${AIRFLOW_ADMIN_USERNAME}
  #     AIRFLOW_ADMIN_PASSWORD: ${AIRFLOW_ADMIN_PASSWORD}
  #     AIRFLOW_ADMIN_EMAIL: ${AIRFLOW_ADMIN_EMAIL}
  #     AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_db:5432/${POSTGRES_DB}
  #     AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
  #     AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
  #     AIRFLOW__CORE__EXECUTOR: LocalExecutor
  #     AIRFLOW__WEBSERVER__RBAC: 'true'
  #   volumes:
  #     - ./src/Apache/Airflow:/opt/airflow/dags
  #     - ./src:/opt/airflow/scripts
  #   networks:
  #     - dc_network
  #   command: triggerer
  #   depends_on:
  #     - airflow-init
  #   restart: always

  # airflow-scheduler:
  #   image: airflow-custom:latest
  #   build:
  #     context: .
  #     dockerfile: docker_files/apache_airflow/Dockerfile
  #   container_name: airflow-scheduler
  #   environment:
  #     AIRFLOW_ADMIN_USERNAME: ${AIRFLOW_ADMIN_USERNAME}
  #     AIRFLOW_ADMIN_PASSWORD: ${AIRFLOW_ADMIN_PASSWORD}
  #     AIRFLOW_ADMIN_EMAIL: ${AIRFLOW_ADMIN_EMAIL}
  #     AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_db:5432/${POSTGRES_DB}
  #     AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
  #     AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
  #     AIRFLOW__CORE__EXECUTOR: LocalExecutor
  #     AIRFLOW__WEBSERVER__RBAC: 'true'
  #   volumes:
  #     - ./src/Apache/Airflow:/opt/airflow/dags
  #     - ./src:/opt/airflow/scripts
  #   networks:
  #     - dc_network
  #   command: scheduler
  #   depends_on:
  #     - airflow-init
  #   restart: always

# --- Networks & Volumes ---
networks:
  dc_network:
    driver: bridge

volumes:
  mongo_db:
  postgres_db:
  qdrant_db:
  ollama_llm:
  vllm_llm: